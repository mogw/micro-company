package tests

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/gin-gonic/gin"
	"github.com/mogw/micro-company/internal/auth"
	"github.com/mogw/micro-company/internal/company"
	"github.com/mogw/micro-company/internal/config"
	"github.com/mogw/micro-company/internal/db"
	"github.com/mogw/micro-company/internal/kafka"
	"github.com/stretchr/testify/assert"
)

var (
	router *gin.Engine
)

func setupRouter() {
	cfg := config.LoadConfig()

	mongoClient, err := db.ConnectMongo(cfg.MongoURI)
	if err != nil {
		panic("Failed to connect to MongoDB")
	}

	kafkaProducer := kafka.NewProducer(cfg.KafkaBroker)

	companyRepo := company.NewRepository(mongoClient, "companydb", "companies")
	companyService := company.NewService(companyRepo, kafkaProducer)
	companyHandler := company.NewHandler(companyService)

	router = gin.Default()

	// Public routes
	router.GET("/companies/:id", companyHandler.GetCompany)

	// Protected routes
	authRoutes := router.Group("/")
	authRoutes.Use(auth.JWTMiddleware(cfg.JWTSecret))
	companyHandler.RegisterRoutes(authRoutes)
}

func TestMain(m *testing.M) {
	setupRouter()
	m.Run()
}

func getToken() string {
	// Use the token generated by the token generation program
	return "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MjE3NjA4NjQsInVzZXJuYW1lIjoidGVzdHVzZXIifQ._HcTOZDzEG_qIG5o_FG0AcDuADLekkQ73O59XtYRcQU"
}

func TestCreateCompany(t *testing.T) {
	token := getToken()

	comp := company.Company{
		Name:              "Company 1",
		Description:       "This is a test company",
		AmountOfEmployees: 10,
		Registered:        true,
		Type:              "Corporations",
	}

	jsonValue, _ := json.Marshal(comp)
	req, _ := http.NewRequest("POST", "/companies", bytes.NewBuffer(jsonValue))
	req.Header.Set("Authorization", "Bearer "+token)
	req.Header.Set("Content-Type", "application/json")

	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusCreated, w.Code)

	var createdCompany company.Company
	json.Unmarshal(w.Body.Bytes(), &createdCompany)
	assert.Equal(t, comp.Name, createdCompany.Name)
	assert.Equal(t, comp.Description, createdCompany.Description)
	assert.Equal(t, comp.AmountOfEmployees, createdCompany.AmountOfEmployees)
	assert.Equal(t, comp.Registered, createdCompany.Registered)
	assert.Equal(t, comp.Type, createdCompany.Type)
}

func TestGetCompany(t *testing.T) {
	// No token needed for GET requests
	comp := company.Company{
		Name:              "Company 2",
		Description:       "This is a test company for get",
		AmountOfEmployees: 20,
		Registered:        true,
		Type:              "NonProfit",
	}

	jsonValue, _ := json.Marshal(comp)
	req, _ := http.NewRequest("POST", "/companies", bytes.NewBuffer(jsonValue))
	req.Header.Set("Authorization", "Bearer "+getToken())
	req.Header.Set("Content-Type", "application/json")

	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusCreated, w.Code)

	var createdCompany company.Company
	json.Unmarshal(w.Body.Bytes(), &createdCompany)

	req, _ = http.NewRequest("GET", "/companies/"+createdCompany.ID.String(), nil)

	w = httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)

	var fetchedCompany company.Company
	json.Unmarshal(w.Body.Bytes(), &fetchedCompany)
	assert.Equal(t, createdCompany.ID, fetchedCompany.ID)
	assert.Equal(t, createdCompany.Name, fetchedCompany.Name)
	assert.Equal(t, createdCompany.Description, fetchedCompany.Description)
	assert.Equal(t, createdCompany.AmountOfEmployees, fetchedCompany.AmountOfEmployees)
	assert.Equal(t, createdCompany.Registered, fetchedCompany.Registered)
	assert.Equal(t, createdCompany.Type, fetchedCompany.Type)
}

func TestUpdateCompany(t *testing.T) {
	token := getToken()

	comp := company.Company{
		Name:              "Company 3",
		Description:       "This is a test company for update",
		AmountOfEmployees: 30,
		Registered:        true,
		Type:              "Cooperative",
	}

	jsonValue, _ := json.Marshal(comp)
	req, _ := http.NewRequest("POST", "/companies", bytes.NewBuffer(jsonValue))
	req.Header.Set("Authorization", "Bearer "+token)
	req.Header.Set("Content-Type", "application/json")

	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusCreated, w.Code)

	var createdCompany company.Company
	json.Unmarshal(w.Body.Bytes(), &createdCompany)

	update := map[string]interface{}{
		"name":                "Updated Company",
		"amount_of_employees": 50,
	}
	jsonValue, _ = json.Marshal(update)
	req, _ = http.NewRequest("PATCH", "/companies/"+createdCompany.ID.String(), bytes.NewBuffer(jsonValue))
	req.Header.Set("Authorization", "Bearer "+token)
	req.Header.Set("Content-Type", "application/json")

	w = httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)

	req, _ = http.NewRequest("GET", "/companies/"+createdCompany.ID.String(), nil)

	w = httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)

	var updatedCompany company.Company
	json.Unmarshal(w.Body.Bytes(), &updatedCompany)
	assert.Equal(t, "Updated Company", updatedCompany.Name)
	assert.Equal(t, 50, updatedCompany.AmountOfEmployees)
}

func TestDeleteCompany(t *testing.T) {
	token := getToken()

	comp := company.Company{
		Name:              "Company 4",
		Description:       "This is a test company for delete",
		AmountOfEmployees: 40,
		Registered:        true,
		Type:              "Sole Proprietorship",
	}

	jsonValue, _ := json.Marshal(comp)
	req, _ := http.NewRequest("POST", "/companies", bytes.NewBuffer(jsonValue))
	req.Header.Set("Authorization", "Bearer "+token)
	req.Header.Set("Content-Type", "application/json")

	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusCreated, w.Code)

	var createdCompany company.Company
	json.Unmarshal(w.Body.Bytes(), &createdCompany)

	req, _ = http.NewRequest("DELETE", "/companies/"+createdCompany.ID.String(), nil)
	req.Header.Set("Authorization", "Bearer "+token)

	w = httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusNoContent, w.Code)

	req, _ = http.NewRequest("GET", "/companies/"+createdCompany.ID.String(), nil)

	w = httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusNotFound, w.Code)
}
